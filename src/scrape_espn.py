import os
import time
import numpy as np
import pandas as pd
from bs4 import BeautifulSoup, ResultSet
from multiprocessing import cpu_count, Pool
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from tqdm import tqdm

# Set up Selenium WebDriver
SERVICE: Service = Service('/usr/bin/chromedriver')
TEAM_CODES_TT: dict[str, str] = {
    'LAA': 'ANA',
    'ARI': 'ARI',
    'ATL': 'ATL',
    'BAL': 'BAL',
    'BOS': 'BOS',
    'CHW': 'CHA',
    'CHC': 'CHN',
    'CIN': 'CIN',
    'CLE': 'CLE',
    'COL': 'COL',
    'DET': 'DET',
    'HOU': 'HOU',
    'KC': 'KCA',
    'LAD': 'LAN',
    'MIA': 'MIA',
    'MIL': 'MIL',
    'MIN': 'MIN',
    'NYY': 'NYA',
    'NYM': 'NYN',
    'OAK': 'OAK',
    'PHI': 'PHI',
    'PIT': 'PIT',
    'SD': 'SDN',
    'SEA': 'SEA',
    'SF': 'SFN',
    'STL': 'SLN',
    'TB': 'TBA',
    'TEX': 'TEX',
    'TOR': 'TOR',
    'WSH': 'WAS'
}


def process_dates(args: tuple[int, np.ndarray]) -> list[pd.DataFrame]:
    """
    Wrapper function to process a single date with a specific driver instance.
    """
    # Split out arguments
    worker_ind: int
    date_chunk: np.ndarray
    worker_ind, date_chunk = args

    # Initialize a driver for this process
    time.sleep(3 * (worker_ind + 1))  # Allow three seconds between each initialization of webdriver
    driver: webdriver.Chrome = webdriver.Chrome(service=SERVICE)

    # List to hold captured data
    dfs: list[pd.DataFrame] = []

    prog_bar: tqdm = tqdm(date_chunk)
    date: str
    for date in prog_bar:
        prog_bar.set_description(date)
        date_home_teams: list[str] = []
        date_page: str = f'https://www.espn.com/mlb/scoreboard/_/date/{date}'

        driver.get(date_page)
        time.sleep(5)  # Allow time for JavaScript to load
        soup: BeautifulSoup = BeautifulSoup(driver.page_source, 'html.parser')

        link: BeautifulSoup
        for link in soup.find_all('a', href=True):
            try:
                link_href: str = link['href']  # type: ignore

                if 'playbyplay' in link_href or link.get_text(strip=True) == 'Highlights':
                    if 'playbyplay' in link_href:
                        playbyplay_page: str = f'https://www.espn.com{link_href}'
                    else:
                        espn_game_id: str = link_href.split('/')[-1]
                        playbyplay_page = f'https://www.espn.com/mlb/playbyplay/_/gameId/{espn_game_id}'

                    driver.get(playbyplay_page)
                    time.sleep(5)  # Allow time for JavaScript to load

                    play_soup: BeautifulSoup = BeautifulSoup(driver.page_source, 'html.parser')

                    # Get the home team
                    teams: list[str] = []
                    anchor: BeautifulSoup
                    for anchor in play_soup.find_all('a', 'AnchorLink'):
                        anchor_txt: str = anchor.get_text(strip=True)

                        if anchor_txt in TEAM_CODES_TT.keys():
                            teams.append(anchor_txt)

                    assert len(teams) == 2, f'Found {len(teams)} on {playbyplay_page}'
                    home_team: str = TEAM_CODES_TT[teams[-1]]
                    date_home_teams.append(home_team)

                    half_innings: ResultSet = play_soup.find_all('section', class_='HalfInning')
                    top: bool = False
                    inning: int = 0

                    half_inning: BeautifulSoup
                    for half_inning in half_innings:
                        top = not top

                        if top:
                            inning += 1

                        play_descriptions: ResultSet = half_inning.find_all('div', class_='PlayHeader__description')

                        if play_descriptions:
                            last_description: str = play_descriptions[-1].get_text(strip=True)

                            if 'pitches to' in last_description:
                                if 'PlayHeader__description--info-play' in play_descriptions[-2].get('class', []):
                                    add_info: str = play_descriptions[-2].get_text()
                                    last_description += f'. ({add_info}).'

                            n_day_games: int = sum(tm == home_team for tm in date_home_teams)
                            df_temp: pd.DataFrame = pd.DataFrame({
                                'game_id': [f'{home_team}{date}{0 if n_day_games == 1 else 2}'],
                                'inning': [inning],
                                'at_home': [not top],
                                'outs_post': [3],
                                'play_description': [last_description],
                                'site': [playbyplay_page]
                            })
                            dfs.append(df_temp)

            except Exception as e:
                print(f'Encountered exception {e} on page {link["href"]}.')

    return dfs


def main(dates: list[str]) -> list[pd.DataFrame]:
    """
    Parallelized main function to process multiple dates using multiprocessing.
    """
    n_processes: int = min(5, cpu_count() - 1, len(dates))  # Limit to 5 processes
    date_chunks: list[np.ndarray] = np.array_split(dates, n_processes)
    process_pairs: list[tuple[int, np.ndarray]] = [(i, date_chunks[i]) for i in range(n_processes)]

    with Pool(n_processes) as pool:
        # Use map to parallelize date processing
        results: list[list[pd.DataFrame]] = pool.map(process_dates, process_pairs)

    # Flatten the list of DataFrames
    return [df for result in results for df in result]


if __name__ == '__main__':
    os.chdir(os.path.dirname(os.path.dirname(__file__)))
    assert os.getcwd() == '/home/philip/Documents/R projects/baseball', f'Wrong WD: {os.getcwd()}'

    # 2024
    # year: int = 2024
    # dates: list[str] = [
    #     '20240320', '20240321', '20240328', '20240329', '20240330', '20240331', '20240401', '20240402', '20240403',
    #     '20240404', '20240405', '20240406', '20240407', '20240408', '20240409', '20240410', '20240411', '20240412',
    #     '20240413', '20240414', '20240415', '20240416', '20240417', '20240418', '20240419', '20240420', '20240421',
    #     '20240422', '20240423', '20240424', '20240425', '20240426', '20240427', '20240428', '20240429', '20240430',
    #     '20240501', '20240502', '20240503', '20240504', '20240505', '20240506', '20240507', '20240508', '20240509',
    #     '20240510', '20240511', '20240512', '20240513', '20240514', '20240515', '20240516', '20240517', '20240518',
    #     '20240519', '20240520', '20240521', '20240522', '20240523', '20240524', '20240525', '20240526', '20240527',
    #     '20240528', '20240529', '20240530', '20240531', '20240601', '20240602', '20240603', '20240604', '20240605',
    #     '20240606', '20240607', '20240608', '20240609', '20240610', '20240611', '20240612', '20240613', '20240614',
    #     '20240615', '20240616', '20240617', '20240618', '20240619', '20240620', '20240621', '20240622', '20240623',
    #     '20240624', '20240625', '20240626', '20240627', '20240628', '20240629', '20240630', '20240701', '20240702',
    #     '20240703', '20240704', '20240705', '20240706', '20240707', '20240708', '20240709', '20240710', '20240711',
    #     '20240712', '20240713', '20240714', '20240719', '20240720', '20240721', '20240722', '20240723', '20240724',
    #     '20240725', '20240726', '20240727', '20240728', '20240729', '20240730', '20240731', '20240801', '20240802',
    #     '20240803', '20240804', '20240805', '20240806', '20240807', '20240808', '20240809', '20240810', '20240811',
    #     '20240812', '20240813', '20240814', '20240815', '20240816', '20240817', '20240818', '20240819', '20240820',
    #     '20240821', '20240822', '20240823', '20240824', '20240825', '20240826', '20240827', '20240828', '20240829',
    #     '20240830', '20240831', '20240901', '20240902', '20240903', '20240904', '20240905', '20240906', '20240907',
    #     '20240908', '20240909', '20240910', '20240911', '20240912', '20240913', '20240914', '20240915', '20240916',
    #     '20240917', '20240918', '20240919', '20240920', '20240921', '20240922', '20240923', '20240924', '20240925',
    #     '20240926', '20240927', '20240928', '20240929', '20240930', '20241001', '20241002', '20241003', '20241005',
    #     '20241006', '20241007', '20241008', '20241009', '20241010', '20241011', '20241012', '20241013', '20241014',
    #     '20241015', '20241016', '20241017', '20241018', '20241019', '20241020', '20241025', '20241026', '20241028',
    #     '20241029', '20241030'
    # ]

    # 2023
    # year: int = 2023
    # dates: list[str] = [
    #     '20230330' '20230331', '20230401', '20230402', '20230403', '20230404', '20230405', '20230406', '20230407',
    #     '20230408', '20230409', '20230410', '20230411', '20230412', '20230413', '20230414', '20230415', '20230416',
    #     '20230417', '20230418', '20230419', '20230420', '20230421', '20230422', '20230423', '20230424', '20230425',
    #     '20230426', '20230427', '20230428', '20230429', '20230430', '20230501', '20230502', '20230503', '20230504',
    #     '20230505', '20230506', '20230507', '20230508', '20230509', '20230510', '20230511', '20230512', '20230513',
    #     '20230514', '20230515', '20230516', '20230517', '20230518', '20230519', '20230520', '20230521', '20230522',
    #     '20230523', '20230524', '20230525', '20230526', '20230527', '20230528', '20230529', '20230530', '20230531',
    #     '20230601', '20230602', '20230603', '20230604', '20230605', '20230606', '20230607', '20230608', '20230609',
    #     '20230610', '20230611', '20230612', '20230613', '20230614', '20230615', '20230616', '20230617', '20230618',
    #     '20230619', '20230620', '20230621', '20230622', '20230623', '20230624', '20230625', '20230626', '20230627',
    #     '20230628', '20230629', '20230630', '20230701', '20230702', '20230703', '20230704', '20230705', '20230706',
    #     '20230707', '20230708', '20230709', '20230714', '20230715', '20230716', '20230717', '20230718', '20230719',
    #     '20230720', '20230721', '20230722', '20230723', '20230724', '20230725', '20230726', '20230727', '20230728',
    #     '20230729', '20230730', '20230731', '20230801', '20230802', '20230803', '20230804', '20230805', '20230806',
    #     '20230807', '20230808', '20230809', '20230810', '20230811', '20230812', '20230813', '20230814', '20230815',
    #     '20230816', '20230817', '20230818', '20230819', '20230820', '20230821', '20230822', '20230823', '20230824',
    #     '20230825', '20230826', '20230827', '20230828', '20230829', '20230830', '20230831', '20230901', '20230902',
    #     '20230903', '20230904', '20230905', '20230906', '20230907', '20230908', '20230909', '20230910', '20230911',
    #     '20230912', '20230913', '20230914', '20230915', '20230916', '20230917', '20230918', '20230919', '20230920',
    #     '20230921', '20230922', '20230923', '20230924', '20230925', '20230926', '20230927', '20230928', '20230929',
    #     '20230930', '20231001', '20231003', '20231004', '20231007', '20231008', '20231009', '20231010', '20231011',
    #     '20231012', '20231015', '20231016', '20231017', '20231018', '20231019', '20231020', '20231021', '20231022',
    #     '20231023', '20231024', '20231027', '20231028', '20231030', '20231031', '20231101'
    # ]

    # year: int = 2022
    # dates: list[str] = [
    #     '20220407', '20220408', '20220409', '20220410', '20220411', '20220412', '20220413', '20220414', '20220415',
    #     '20220416', '20220417', '20220418', '20220419', '20220420', '20220421', '20220422', '20220423', '20220424',
    #     '20220425', '20220426', '20220427', '20220428', '20220429', '20220430', '20220501', '20220502', '20220503',
    #     '20220504', '20220505', '20220506', '20220507', '20220508', '20220509', '20220510', '20220511', '20220512',
    #     '20220513', '20220514', '20220515', '20220516', '20220517', '20220518', '20220519', '20220520', '20220521',
    #     '20220522', '20220523', '20220524', '20220525', '20220526', '20220527', '20220528', '20220529', '20220530',
    #     '20220531', '20220601', '20220602', '20220603', '20220604', '20220605', '20220606', '20220607', '20220608',
    #     '20220609', '20220610', '20220611', '20220612', '20220613', '20220614', '20220615', '20220616', '20220617',
    #     '20220618', '20220619', '20220620', '20220621', '20220622', '20220623', '20220624', '20220625', '20220626',
    #     '20220627', '20220628', '20220629', '20220630', '20220701', '20220702', '20220703', '20220704', '20220705',
    #     '20220706', '20220707', '20220708', '20220709', '20220710', '20220711', '20220712', '20220713', '20220714',
    #     '20220715', '20220716', '20220717', '20220721', '20220722', '20220723', '20220724', '20220725', '20220726',
    #     '20220727', '20220728', '20220729', '20220730', '20220731', '20220801', '20220802', '20220803', '20220804',
    #     '20220805', '20220806', '20220807', '20220808', '20220809', '20220810', '20220811', '20220812', '20220813',
    #     '20220814', '20220815', '20220816', '20220817', '20220818', '20220819', '20220820', '20220821', '20220822',
    #     '20220823', '20220824', '20220825', '20220826', '20220827', '20220828', '20220829', '20220830', '20220831',
    #     '20220901', '20220902', '20220903', '20220904', '20220905', '20220906', '20220907', '20220908', '20220909',
    #     '20220910', '20220911', '20220912', '20220913', '20220914', '20220915', '20220916', '20220917', '20220918',
    #     '20220919', '20220920', '20220921', '20220922', '20220923', '20220924', '20220925', '20220926', '20220927',
    #     '20220928', '20220929', '20220930', '20221001', '20221002', '20221003', '20221004', '20221005', '20221007',
    #     '20221008', '20221009', '20221011', '20221012', '20221013', '20221014', '20221015', '20221016', '20221018',
    #     '20221019', '20221020', '20221021', '20221022', '20221023', '20221028', '20221029', '20221101', '20221102',
    #     '20221103', '20221105'
    # ]

    year: int = 2021
    dates: list[str] = [
        '20210401', '20210402', '20210403', '20210404', '20210405', '20210406', '20210407', '20210408', '20210409',
        '20210410', '20210411', '20210412', '20210413', '20210414', '20210415', '20210416', '20210417', '20210418',
        '20210419', '20210420', '20210421', '20210422', '20210423', '20210424', '20210425', '20210426', '20210427',
        '20210428', '20210429', '20210430', '20210501', '20210502', '20210503', '20210504', '20210505', '20210506',
        '20210507', '20210508', '20210509', '20210510', '20210511', '20210512', '20210513', '20210514', '20210515',
        '20210516', '20210517', '20210518', '20210519', '20210520', '20210521', '20210522', '20210523', '20210524',
        '20210525', '20210526', '20210527', '20210528', '20210529', '20210530', '20210531', '20210601', '20210602',
        '20210603', '20210604', '20210605', '20210606', '20210607', '20210608', '20210609', '20210610', '20210611',
        '20210612', '20210613', '20210614', '20210615', '20210616', '20210617', '20210618', '20210619', '20210620',
        '20210621', '20210622', '20210623', '20210624', '20210625', '20210626', '20210627', '20210628', '20210629',
        '20210630', '20210701', '20210702', '20210703', '20210704', '20210705', '20210706', '20210707', '20210708',
        '20210709', '20210710', '20210711', '20210716', '20210717', '20210718', '20210719', '20210720', '20210721',
        '20210722', '20210723', '20210724', '20210725', '20210726', '20210727', '20210728', '20210729', '20210730',
        '20210731', '20210801', '20210802', '20210803', '20210804', '20210805', '20210806', '20210807', '20210808',
        '20210809', '20210810', '20210811', '20210812', '20210813', '20210814', '20210815', '20210816', '20210817',
        '20210818', '20210819', '20210820', '20210821', '20210822', '20210823', '20210824', '20210825', '20210826',
        '20210827', '20210828', '20210829', '20210830', '20210831', '20210901', '20210902', '20210903', '20210904',
        '20210905', '20210906', '20210907', '20210908', '20210909', '20210910', '20210911', '20210912', '20210913',
        '20210914', '20210915', '20210916', '20210917', '20210918', '20210919', '20210920', '20210921', '20210922',
        '20210923', '20210924', '20210925', '20210926', '20210927', '20210928', '20210929', '20210930', '20211001',
        '20211002', '20211003', '20211005', '20211006', '20211007', '20211008', '20211009', '20211010', '20211011',
        '20211012', '20211014', '20211015', '20211016', '20211017', '20211018', '20211019', '20211020', '20211021',
        '20211022', '20211023', '20211026', '20211027', '20211029', '20211030', '20211031', '20211102'
    ]

    # Confirm correct dates
    assert all(int(d[:4]) == year for d in dates), f'Every date should have the same year: {year}.'

    # Retrieve data from specified date webpages
    dfs: list[pd.DataFrame] = main(dates)

    # Concatenate all of the data together
    df: pd.DataFrame = pd.concat(dfs, ignore_index=True)

    # Fix 0s to 1s for multi-game days
    multi_game_ids: np.ndarray = df.loc[df['game_id'].str.contains('2$', regex=True), 'game_id'].unique()

    for gid in multi_game_ids:
        trunc_id: str = gid[:-1]
        df.loc[df['game_id'] == trunc_id + '0', 'game_id'] = trunc_id + '1'

    df.to_csv(os.path.join('raw', str(year), 'last_inning_plays.csv'), index=False)
